{"ast":null,"code":"var _jsxFileName = \"/Users/ronikennedy/classinsight_frontend/src/components/DonutChart/DonutChart.jsx\";\n// src/app/components/DonutChart/DonutChart.jsx\nimport React from 'react';\nimport styles from './DonutChart.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonutChart = ({\n  percentage,\n  segments\n}) => {\n  // Calculate the circle properties\n  const radius = 70;\n  const circumference = 2 * Math.PI * radius;\n\n  // Function to convert segments to actual circle segments\n  const createSegments = () => {\n    // Sort segments by value (descending)\n    const sortedSegments = [...segments].sort((a, b) => b.value - a.value);\n\n    // Calculate start and end positions for each segment\n    let currentAngle = 0;\n    const segmentData = [];\n    sortedSegments.forEach(segment => {\n      // Calculate segment angle (in degrees)\n      const segmentAngle = segment.value / 100 * 360;\n\n      // Calculate start and end coordinates\n      const startX = 100 + radius * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + radius * Math.sin((currentAngle - 90) * Math.PI / 180);\n      const endAngle = currentAngle + segmentAngle;\n      const endX = 100 + radius * Math.cos((endAngle - 90) * Math.PI / 180);\n      const endY = 100 + radius * Math.sin((endAngle - 90) * Math.PI / 180);\n\n      // Determine if the arc should take the long path (> 180 degrees)\n      const largeArcFlag = segmentAngle > 180 ? 1 : 0;\n\n      // Create SVG arc path\n      const path = `\n        M 100 100\n        L ${startX} ${startY}\n        A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}\n        Z\n      `;\n      segmentData.push({\n        ...segment,\n        path\n      });\n\n      // Update current angle for next segment\n      currentAngle += segmentAngle;\n    });\n    return segmentData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.donutChartWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 200 200\",\n      className: styles.donutChart,\n      children: [createSegments().map((segment, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: segment.path,\n        fill: segment.color,\n        className: styles.segment\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: \"50\",\n        fill: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"100\",\n        y: \"100\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        className: styles.percentageText,\n        children: [percentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_c = DonutChart;\nexport default DonutChart;\nvar _c;\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","DonutChart","percentage","segments","radius","circumference","Math","PI","createSegments","sortedSegments","sort","a","b","value","currentAngle","segmentData","forEach","segment","segmentAngle","startX","cos","startY","sin","endAngle","endX","endY","largeArcFlag","path","push","className","donutChartWrapper","children","viewBox","donutChart","map","index","d","fill","color","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","x","y","textAnchor","dominantBaseline","percentageText","_c","$RefreshReg$"],"sources":["/Users/ronikennedy/classinsight_frontend/src/components/DonutChart/DonutChart.jsx"],"sourcesContent":["// src/app/components/DonutChart/DonutChart.jsx\nimport React from 'react';\nimport styles from './DonutChart.module.scss';\n\nconst DonutChart = ({ percentage, segments }) => {\n  // Calculate the circle properties\n  const radius = 70;\n  const circumference = 2 * Math.PI * radius;\n  \n  // Function to convert segments to actual circle segments\n  const createSegments = () => {\n    // Sort segments by value (descending)\n    const sortedSegments = [...segments].sort((a, b) => b.value - a.value);\n    \n    // Calculate start and end positions for each segment\n    let currentAngle = 0;\n    const segmentData = [];\n    \n    sortedSegments.forEach(segment => {\n      // Calculate segment angle (in degrees)\n      const segmentAngle = (segment.value / 100) * 360;\n      \n      // Calculate start and end coordinates\n      const startX = 100 + radius * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + radius * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const endAngle = currentAngle + segmentAngle;\n      const endX = 100 + radius * Math.cos((endAngle - 90) * Math.PI / 180);\n      const endY = 100 + radius * Math.sin((endAngle - 90) * Math.PI / 180);\n      \n      // Determine if the arc should take the long path (> 180 degrees)\n      const largeArcFlag = segmentAngle > 180 ? 1 : 0;\n      \n      // Create SVG arc path\n      const path = `\n        M 100 100\n        L ${startX} ${startY}\n        A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY}\n        Z\n      `;\n      \n      segmentData.push({\n        ...segment,\n        path\n      });\n      \n      // Update current angle for next segment\n      currentAngle += segmentAngle;\n    });\n    \n    return segmentData;\n  };\n\n  return (\n    <div className={styles.donutChartWrapper}>\n      <svg viewBox=\"0 0 200 200\" className={styles.donutChart}>\n        {/* Donut segments */}\n        {createSegments().map((segment, index) => (\n          <path\n            key={index}\n            d={segment.path}\n            fill={segment.color}\n            className={styles.segment}\n          />\n        ))}\n        \n        {/* Inner white circle to create donut effect */}\n        <circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"white\" />\n        \n        {/* Percentage text */}\n        <text \n          x=\"100\" \n          y=\"100\" \n          textAnchor=\"middle\" \n          dominantBaseline=\"middle\" \n          className={styles.percentageText}>\n          {percentage}%\n        </text>\n      </svg>\n    </div>\n  );\n};\n\nexport default DonutChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}