{"ast":null,"code":"var _jsxFileName = \"/Users/ronikennedy/classinsight_frontend/src/components/DonutChart/DonutChart.jsx\";\n// src/app/components/DonutChart/DonutChart.jsx\nimport React from 'react';\nimport './DonutChart.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonutChart = ({\n  percentage,\n  segments\n}) => {\n  // Calculate the circle properties\n  const radius = 70;\n  const circumference = 2 * Math.PI * radius;\n\n  // Sort segments to ensure they're drawn in the correct order\n  const sortedSegments = [...segments].sort((a, b) => b.value - a.value);\n\n  // Calculate stroke dasharray and stroke dashoffset for each segment\n  let currentOffset = 0;\n  const calculatedSegments = sortedSegments.map(segment => {\n    const segmentLength = segment.value / 100 * circumference;\n    const dasharray = segmentLength;\n    const dashoffset = currentOffset;\n    currentOffset += segmentLength;\n    return {\n      ...segment,\n      dasharray,\n      dashoffset\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donutChartWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 200 200\",\n      className: \"donutChart\",\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: radius,\n        fill: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: radius,\n        fill: \"none\",\n        stroke: \"#E2E8F0\",\n        strokeWidth: \"20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), calculatedSegments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: radius,\n        fill: \"none\",\n        stroke: segment.color,\n        strokeWidth: \"20\",\n        strokeDasharray: `${segment.dasharray} ${circumference - segment.dasharray}`,\n        strokeDashoffset: -segment.dashoffset,\n        className: \"chartSegment\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"100\",\n        y: \"100\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        className: \"percentageText\",\n        children: [percentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = DonutChart;\nexport default DonutChart;\nvar _c;\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DonutChart","percentage","segments","radius","circumference","Math","PI","sortedSegments","sort","a","b","value","currentOffset","calculatedSegments","map","segment","segmentLength","dasharray","dashoffset","className","children","viewBox","cx","cy","r","fill","fileName","_jsxFileName","lineNumber","columnNumber","stroke","strokeWidth","index","color","strokeDasharray","strokeDashoffset","x","y","textAnchor","dominantBaseline","_c","$RefreshReg$"],"sources":["/Users/ronikennedy/classinsight_frontend/src/components/DonutChart/DonutChart.jsx"],"sourcesContent":["// src/app/components/DonutChart/DonutChart.jsx\nimport React from 'react';\nimport './DonutChart.scss';\n\nconst DonutChart = ({ percentage, segments }) => {\n  // Calculate the circle properties\n  const radius = 70;\n  const circumference = 2 * Math.PI * radius;\n  \n  // Sort segments to ensure they're drawn in the correct order\n  const sortedSegments = [...segments].sort((a, b) => b.value - a.value);\n  \n  // Calculate stroke dasharray and stroke dashoffset for each segment\n  let currentOffset = 0;\n  const calculatedSegments = sortedSegments.map(segment => {\n    const segmentLength = (segment.value / 100) * circumference;\n    const dasharray = segmentLength;\n    const dashoffset = currentOffset;\n    \n    currentOffset += segmentLength;\n    \n    return {\n      ...segment,\n      dasharray,\n      dashoffset\n    };\n  });\n\n  return (\n    <div className=\"donutChartWrapper\">\n      <svg viewBox=\"0 0 200 200\" className=\"donutChart\">\n        <circle cx=\"100\" cy=\"100\" r={radius} fill=\"white\" />\n        \n        {/* Base circle (light gray) */}\n        <circle \n          cx=\"100\" \n          cy=\"100\" \n          r={radius} \n          fill=\"none\" \n          stroke=\"#E2E8F0\" \n          strokeWidth=\"20\" \n        />\n        \n        {/* Segments */}\n        {calculatedSegments.map((segment, index) => (\n          <circle \n            key={index}\n            cx=\"100\" \n            cy=\"100\" \n            r={radius} \n            fill=\"none\" \n            stroke={segment.color} \n            strokeWidth=\"20\"\n            strokeDasharray={`${segment.dasharray} ${circumference - segment.dasharray}`}\n            strokeDashoffset={-segment.dashoffset}\n            className=\"chartSegment\"\n          />\n        ))}\n        \n        {/* Percentage text */}\n        <text \n          x=\"100\" \n          y=\"100\" \n          textAnchor=\"middle\" \n          dominantBaseline=\"middle\" \n          className=\"percentageText\">\n          {percentage}%\n        </text>\n      </svg>\n    </div>\n  );\n};\n\nexport default DonutChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}