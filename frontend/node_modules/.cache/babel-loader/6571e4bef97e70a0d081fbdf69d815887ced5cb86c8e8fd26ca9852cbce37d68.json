{"ast":null,"code":"var _jsxFileName = \"/Users/ronikennedy/classinsight_frontend/src/components/DonutChart/DonutChart.jsx\";\nimport React from 'react';\nimport './DonutChart.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonutChart = ({\n  percentage,\n  segments\n}) => {\n  // Calculate the circumference of the circle\n  const radius = 80;\n  const circumference = 2 * Math.PI * radius;\n\n  // Calculate stroke dasharray and stroke dashoffset for each segment\n  let currentOffset = 0;\n  const calculatedSegments = segments.map(segment => {\n    const segmentLength = segment.value / 100 * circumference;\n    const segmentData = {\n      ...segment,\n      dasharray: `${segmentLength} ${circumference - segmentLength}`,\n      dashoffset: -currentOffset\n    };\n    currentOffset += segmentLength;\n    return segmentData;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"donut-chart-component\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 200 200\",\n      children: [calculatedSegments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: radius,\n        fill: \"none\",\n        stroke: segment.color,\n        strokeWidth: \"30\",\n        strokeDasharray: segment.dasharray,\n        strokeDashoffset: segment.dashoffset,\n        className: \"donut-segment\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"100\",\n        y: \"100\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        className: \"percentage-text\",\n        children: [percentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = DonutChart;\nexport default DonutChart;\nvar _c;\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DonutChart","percentage","segments","radius","circumference","Math","PI","currentOffset","calculatedSegments","map","segment","segmentLength","value","segmentData","dasharray","dashoffset","className","children","viewBox","index","cx","cy","r","fill","stroke","color","strokeWidth","strokeDasharray","strokeDashoffset","fileName","_jsxFileName","lineNumber","columnNumber","x","y","textAnchor","dominantBaseline","_c","$RefreshReg$"],"sources":["/Users/ronikennedy/classinsight_frontend/src/components/DonutChart/DonutChart.jsx"],"sourcesContent":["import React from 'react';\nimport './DonutChart.scss';\n\nconst DonutChart = ({ percentage, segments }) => {\n  // Calculate the circumference of the circle\n  const radius = 80;\n  const circumference = 2 * Math.PI * radius;\n  \n  // Calculate stroke dasharray and stroke dashoffset for each segment\n  let currentOffset = 0;\n  const calculatedSegments = segments.map(segment => {\n    const segmentLength = (segment.value / 100) * circumference;\n    const segmentData = {\n      ...segment,\n      dasharray: `${segmentLength} ${circumference - segmentLength}`,\n      dashoffset: -currentOffset\n    };\n    currentOffset += segmentLength;\n    return segmentData;\n  });\n\n  return (\n    <div className=\"donut-chart-component\">\n      <svg viewBox=\"0 0 200 200\">\n        {calculatedSegments.map((segment, index) => (\n          <circle \n            key={index}\n            cx=\"100\" \n            cy=\"100\" \n            r={radius} \n            fill=\"none\" \n            stroke={segment.color} \n            strokeWidth=\"30\" \n            strokeDasharray={segment.dasharray} \n            strokeDashoffset={segment.dashoffset}\n            className=\"donut-segment\" \n          />\n        ))}\n        <text \n          x=\"100\" \n          y=\"100\" \n          textAnchor=\"middle\" \n          dominantBaseline=\"middle\" \n          className=\"percentage-text\">\n          {percentage}%\n        </text>\n      </svg>\n    </div>\n  );\n};\n\nexport default DonutChart;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,UAAU,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EAC/C;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,aAAa,GAAG,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;;EAE1C;EACA,IAAII,aAAa,GAAG,CAAC;EACrB,MAAMC,kBAAkB,GAAGN,QAAQ,CAACO,GAAG,CAACC,OAAO,IAAI;IACjD,MAAMC,aAAa,GAAID,OAAO,CAACE,KAAK,GAAG,GAAG,GAAIR,aAAa;IAC3D,MAAMS,WAAW,GAAG;MAClB,GAAGH,OAAO;MACVI,SAAS,EAAE,GAAGH,aAAa,IAAIP,aAAa,GAAGO,aAAa,EAAE;MAC9DI,UAAU,EAAE,CAACR;IACf,CAAC;IACDA,aAAa,IAAII,aAAa;IAC9B,OAAOE,WAAW;EACpB,CAAC,CAAC;EAEF,oBACEd,OAAA;IAAKiB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,eACpClB,OAAA;MAAKmB,OAAO,EAAC,aAAa;MAAAD,QAAA,GACvBT,kBAAkB,CAACC,GAAG,CAAC,CAACC,OAAO,EAAES,KAAK,kBACrCpB,OAAA;QAEEqB,EAAE,EAAC,KAAK;QACRC,EAAE,EAAC,KAAK;QACRC,CAAC,EAAEnB,MAAO;QACVoB,IAAI,EAAC,MAAM;QACXC,MAAM,EAAEd,OAAO,CAACe,KAAM;QACtBC,WAAW,EAAC,IAAI;QAChBC,eAAe,EAAEjB,OAAO,CAACI,SAAU;QACnCc,gBAAgB,EAAElB,OAAO,CAACK,UAAW;QACrCC,SAAS,EAAC;MAAe,GATpBG,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUX,CACF,CAAC,eACFjC,OAAA;QACEkC,CAAC,EAAC,KAAK;QACPC,CAAC,EAAC,KAAK;QACPC,UAAU,EAAC,QAAQ;QACnBC,gBAAgB,EAAC,QAAQ;QACzBpB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,GAC1BhB,UAAU,EAAC,GACd;MAAA;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACK,EAAA,GA9CIrC,UAAU;AAgDhB,eAAeA,UAAU;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}